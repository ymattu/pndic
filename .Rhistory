test_label = test_mnist$label,
mtry_range = c(3L, 40L)
)
mod <- svm_opt(
train_data = iris_train,
train_label = iris_train$Species,
test_data = iris_test,
test_label = iris_test$Species)
library(randomForest)
rf_opt <- function(train_data,
train_label,
test_data,
test_label,
num_tree_range = c(1L, 1000L),
mtry_range,
init_points = 20,
n_iter = 1,
acq = "ei",
kappa = 2.576,
eps = 0.0,
kernel = list(type = "exponential", power = 2))
{
dtrain <- train_data
dtest <- test_data
if (class(train_label) != "factor"){
trainlabel <- as.factor(train_label)
} else{
trainlabel <- train_label}
if (class(test_label) != "factor"){
testlabel <- as.factor(train_label)
} else{
testlabel <- test_label}
rf_holdout <- function(num_trees_opt, mtry_opt) {
model <- ranger(trainlabel ~., dtrain, num.trees = num_trees_opt, mtry = mtry_opt)
t.pred <- predict(model, data = dtest)
Pred <- sum(diag(table(testlabel, t.pred$predictions)))/nrow(dtest)
list(Score = Pred, Pred = Pred)
}
opt_res <- BayesianOptimization(rf_holdout,
bounds = list(num_trees_opt = num_tree_range,
mtry_opt = mtry_range),
init_points,
init_grid_dt = NULL,
n_iter,
acq,
kappa,
eps,
verbose = TRUE)
return(opt_res)
}
set.seed(71)
mod <- rf_opt(
train_data = train_mnist,
train_label = train_mnist$label,
test_data = test_mnist,
test_label = test_mnist$label,
mtry_range = c(3L, 40L)
)
rf_opt <- function(train_data,
train_label,
test_data,
test_label,
num_tree_range = c(1L, 1000L),
mtry_range,
init_points = 20,
n_iter = 1,
acq = "ei",
kappa = 2.576,
eps = 0.0,
kernel = list(type = "exponential", power = 2))
{
dtrain <- train_data
dtest <- test_data
if (class(train_label) != "factor"){
trainlabel <- as.factor(train_label)
} else{
trainlabel <- train_label}
if (class(test_label) != "factor"){
testlabel <- as.factor(train_label)
} else{
testlabel <- test_label}
rf_holdout <- function(num_trees_opt, mtry_opt) {
model <- randomForest(trainlabel ~., dtrain, num.trees= num_trees_opt, mtry = mtry_opt)
t.pred <- predict(model, data = dtest)
Pred <- sum(diag(table(testlabel, t.pred$predictions)))/nrow(dtest)
list(Score = Pred, Pred = Pred)
}
opt_res <- BayesianOptimization(rf_holdout,
bounds = list(num_trees_opt = num_tree_range,
mtry_opt = mtry_range),
init_points,
init_grid_dt = NULL,
n_iter,
acq,
kappa,
eps,
verbose = TRUE)
return(opt_res)
}
set.seed(71)
mod <- rf_opt(
train_data = train_mnist,
train_label = train_mnist$label,
test_data = test_mnist,
test_label = test_mnist$label,
mtry_range = c(3L, 40L)
)
rf_opt <- function(train_data,
train_label,
test_data,
test_label,
num_tree_range = c(1L, 1000L),
mtry_range,
init_points = 20,
n_iter = 1,
acq = "ei",
kappa = 2.576,
eps = 0.0,
kernel = list(type = "exponential", power = 2))
{
dtrain <- train_data
dtest <- test_data
if (class(train_label) != "factor"){
trainlabel <- as.factor(train_label)
} else{
trainlabel <- train_label}
if (class(test_label) != "factor"){
testlabel <- as.factor(train_label)
} else{
testlabel <- test_label}
rf_holdout <- function(num_trees_opt, mtry_opt) {
model <- ranger(trainlabel ~., dtrain, num.trees= num_trees_opt, mtry = mtry_opt)
t.pred <- predict(model, data = dtest)
Pred <- sum(diag(table(testlabel, t.pred$predictions)))/nrow(dtest)
list(Score = Pred, Pred = Pred)
}
opt_res <- BayesianOptimization(rf_holdout,
bounds = list(num_trees_opt = num_tree_range,
mtry_opt = mtry_range),
init_points,
init_grid_dt = NULL,
n_iter,
acq,
kappa,
eps,
verbose = TRUE)
return(opt_res)
}
set.seed(71)
mod <- rf_opt(
train_data = train_mnist,
train_label = train_mnist$label,
test_data = test_mnist,
test_label = test_mnist$label,
mtry_range = c(3L, 40L)
)
rf_opt <- function(train_data,
train_label,
test_data,
test_label,
num_tree_range = c(1L, 1000L),
mtry_range,
init_points = 20,
n_iter = 1,
acq = "ei",
kappa = 2.576,
eps = 0.0,
kernel = list(type = "exponential", power = 2))
{
dtrain <- train_data
dtest <- test_data
if (class(train_label) != "factor"){
trainlabel <- as.factor(train_label)
} else{
trainlabel <- train_label}
if (class(test_label) != "factor"){
testlabel <- as.factor(train_label)
} else{
testlabel <- test_label}
rf_holdout <- function(num_trees_opt, mtry_opt) {
model <- randomForest(trainlabel ~., dtrain, ntree= num_trees_opt, mtry = mtry_opt)
t.pred <- predict(model, newdata = dtest)
Pred <- sum(diag(table(testlabel, t.pred)))/nrow(dtest)
list(Score = Pred, Pred = Pred)
}
opt_res <- BayesianOptimization(rf_holdout,
bounds = list(num_trees_opt = num_tree_range,
mtry_opt = mtry_range),
init_points,
init_grid_dt = NULL,
n_iter,
acq,
kappa,
eps,
verbose = TRUE)
return(opt_res)
}
set.seed(71)
mod <- rf_opt(
train_data = train_mnist,
train_label = train_mnist$label,
test_data = test_mnist,
test_label = test_mnist$label,
mtry_range = c(3L, 40L)
)
train$label <- as.factor(train_mnist$label)
train_mnist$label <- as.factor(train_mnist$label)
test_mnist$label <- as.factor(test_mnist$label)
model <- ranger(label ~., train_mnist)
model <- ranger(trein_mnist$label ~., train_mnist)
model <- ranger(train_mnist$label ~., train_mnist)
t.pred <- predict(model, data = test_mnist)
Pred <- sum(diag(table(test$label, t.pred$predictions)))/nrow(test)
Pred <- sum(diag(table(test_mnist$label, t.pred$predictions)))/nrow(test_mnist)
Pred
?ranger
rf_opt <- function(train_data,
train_label,
test_data,
test_label,
num_tree_range = c(1L, 1000L),
mtry_range,
init_points = 20,
n_iter = 1,
acq = "ei",
kappa = 2.576,
eps = 0.0,
kernel = list(type = "exponential", power = 2))
{
dtrain <- train_data
dtest <- test_data
if (class(train_label) != "factor"){
trainlabel <- as.factor(train_label)
} else{
trainlabel <- train_label}
if (class(test_label) != "factor"){
testlabel <- as.factor(train_label)
} else{
testlabel <- test_label}
rf_holdout <- function(num_trees_opt, mtry_opt) {
model <- ranger(trainlabel ~., dtrain, num.trees = num_trees_opt, mtry = mtry_opt)
t.pred <- predict(model, dat = dtest)
Pred <- sum(diag(table(testlabel, t.pred$predictions)))/nrow(dtest)
list(Score = Pred, Pred = Pred)
}
opt_res <- BayesianOptimization(rf_holdout,
bounds = list(num_trees_opt = num_tree_range,
mtry_opt = mtry_range),
init_points,
init_grid_dt = NULL,
n_iter,
acq,
kappa,
eps,
verbose = TRUE)
return(opt_res)
}
set.seed(71)
mod <- rf_opt(
train_data = train_mnist,
train_label = train_mnist$label,
test_data = test_mnist,
test_label = test_mnist$label,
mtry_range = c(3L, 40L)
)
train_mnist$label <- as.factor(train_mnist$label)
rm(list=ls())
install_github("ymattu/MlBayesOpt")
devtools::install_github("ymattu/MlBayesOpt")
githubinstall::githubinstall("mlbayesopt")
githubinstall::githubinstall("MlBayesOpt")
devtools::install_github("ymattu/MlBayesOpt")
library(MlBayesOpt)
set.seed(71)
res1 <- xgb_opt(train_data = train_mnist,
train_label = train_mnist$label,
test_data = test_mnist,
test_label = test_mnist$label,
objectfun = "multi:softmax",
classes = 10,
evalmetric = "merror"
)
res1 <- xgb_opt(train_data = train_mnist,
train_label = train_mnist$label,
test_data = test_mnist,
test_label = test_mnist$label,
objectfun = "multi:softmax",
classes = 10,
evalmetric = "merror",
acq = "ucb"
)
res1 <- xgb_opt(train_data = iris_train,
train_label = iris_train$Species,
test_data = iris_test,
test_label = iris_test$Species,
objectfun = "multi:softmax",
classes = 3,
evalmetric = "merror"
)
res1 <- xgb_opt(train_data = iris_train,
train_label = iris_train$Species,
test_data = iris_test,
test_label = iris_test$Species,
objectfun = "multi:softmax",
classes = 3,
evalmetric = "merror",
kappa = 3
)
install.packages("forcats")
install.packages('tm','slam')
install.packages(c('tm','slam'))
install.packages("proxy")
RMeCab::RMeCabC
library(twitteR)
library(RMeCab)
library(ggplot2)
toyota.tweets = searchTwitter('@?g???^', n=1500)
consumerKey <- "EhWW5VGtg6BECE5GdU6e1bfkV"
consumerSecret <- "cphBLSeHMsIIhmv7FAAdwvqjC8GkGCLrtoMJXA9IDSkrnvmX3G"
accessToken <- "1251607231-hOh1rd5VdtvrBU6pADFjfQ5xcZMXaEbc0vi6Rmo"
accessSecret <- "Ivu4ZqUGJuKIDevf12G3kyPl4qgpmQ7QL2cc1Jc5v20r3"
options(httr_oauth_cache = TRUE)
setup_twitter_oauth(consumerKey, consumerSecret, accessToken, accessSecret)
toyota.tweets <- searchTwitter('@トヨタ', n=1500)
toyotatwDF <- twListToDF(toyota.tweets)
View(toyotatwDF)
wday.abb <- c("Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun")
extractScreenNames <- function(text, strict = TRUE) {
if (strict) {
# Twitter で screen_name と見なされるものを抽出できるはず
regex <- "(?:(?<!\\w)([@＠])((?>\\w+))(?![@＠])|[\\s\\S])"
} else {
# 例えば hoge@example.com などメールアドレスにもマッチする
regex <- "(?:([@＠])(\\w+)|[\\s\\S])"
}
screenNames <- gsub(regex, "\\1\\2", text, perl = TRUE)
unique(unlist(strsplit(substring(screenNames, 2), "[@＠]")))
}
removeURL <- function(text, strict = TRUE) {
if (strict) {
# 手前に英数字とかがなくて、間にbasic認証があるかもしれなくて（ちなみにTwitterだとURLとみなされない）
# 有効なドメイン名で・・・という文字列を取り除く
regex <- "(?<![-.\\w#@=!'\"/])https?://(?:[^:]+:.+@)?(?:[0-9A-Za-z][-0-9A-Za-z]*(?<!-)\\.)+[A-za-z]+(?:/[-\\w#%=+,.?!&~]*)*"
} else {
regex <- "https?://[-\\w#%=+,.?!&~/]+"
}
gsub(regex, "", text, perl = TRUE)
}
removeScreenName <- function(text, strict = TRUE) {
if (strict) {
# Twitter で screen_name と見なされるものを抽出できるはず
regex <- "(?<!\\w)[@＠](?>\\w+)(?![@＠])"
} else {
# 例えば hoge@example.com などメールアドレスにもマッチする
regex <- "[@＠]\\w+"
}
gsub(regex, "", text, perl = TRUE)
}
removeHashTag <- function(text, strict = TRUE) {
delimiters <- "\\s,.\u3000-\u3002\uFF01\uFF1F"
# cf. http://nobu666.com/2011/07/13/914.html
validJa <- "\u3041-\u3094\u3099-\u309C\u30A1-\u30FA\u30FC\u3400-\uD7A3\uFF10-\uFF19\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFF9E"
if (strict) {
regex <- sprintf("(^|[%s])(?:([#＃](?>[0-9]+)(?!\\w))|[#＃][\\w%s]+)", delimiters, validJa, validJa)
} else {
regex <- sprintf("[#＃][^%s]+", delimiters)
}
gsub(regex, "\\1\\2", text, perl = TRUE)
}
removeSpecialStr <- function(text) {
removeURL(removeHashTag(removeScreenName(text)))
}
toyotatw2DF <- within(toyotatwDF, {
attr(created, "tzone") <- "Asia/Tokyo"
statusSource <- factor(gsub("<a .*?>(.*?)</a>", "\\1", statusSource))
date <- factor(format(created, "%Y-%m-%d"))
hour <- NULL; month <- NULL; year <- NULL; wday <- NULL
with(as.POSIXlt(created), {
hour <<- factor(hour)
month <<- factor(mon + 1)
year <<- factor(year + 1900)
})
textLength <- nchar(text)
# ユーザ名, URL, ハッシュタグを削除（自作関数。utils.R参照。）
cleanText <- removeSpecialStr(text)
cleanTextLength <- nchar(cleanText)
})
pndic <- read.table("http://www.lr.pi.titech.ac.jp/~takamura/pubs/pn_ja.dic",
sep = ":",
col.names = c("term", "kana", "pos", "value"),
colClasses = c("character", "character", "factor", "numeric"),
fileEncoding = "Shift_JIS")
View(pndic)
pndic2 <- aggregate(value ~ term + pos, pndic, mean)
pos <- unique(pndic2$pos)
toyotatwRDF <- docDF(toyotatw2DF, column = "cleanText", type = 1, pos = pos)
toyotatwRDF <- subset(toyotatwRDF, TERM %in% pndic2$term)
toyotatwRDF <- merge(toyotatwRDF, pndic2, by.x = c("TERM", "POS1"), by.y = c("term", "pos"))
score <- colSums(toyotatwRDF[4:(ncol(toyotatwRDF) - 1)] * toyotatwRDF$value)
print(sum(score > 0))
print(sum(score < 0))
print(sum(score == 0))
scoreType <- factor(ifelse(score > 0, "positive",
ifelse(score == 0, "neutral", "negative")),
levels = c("positive", "neutral", "negative"))
print(qplot(x = factor(1), geom = "bar", fill = scoreType) + coord_polar(theta = "y"))
mpndic <- median(pndic$value)
score2 <-score - mpndic
mean(score2)
hist(score2)
library(dplyr)
i2 <- iris %>%
group_by(Species) %>%
summarise_each(funs(max), starts_with("S"))
View(i2)
is.integer(20)
is.integer(20L)
is.numeric(20)
is.numeric(20L)
pndic <- read.table("http://www.lr.pi.titech.ac.jp/~takamura/pubs/pn_ja.dic",
sep = ":",
col.names = c("term", "kana", "pos", "value"),
colClasses = c("character", "character", "factor", "numeric"),
fileEncoding = "Shift_JIS")
library(dplyr)
library(readr)
pndic <- read_table("http://www.lr.pi.titech.ac.jp/~takamura/pubs/pn_ja.dic",
sep = ":",
col.names = c("term", "kana", "pos", "value"),
colClasses = c("character", "character", "factor", "numeric"),
fileEncoding = "Shift_JIS")
pndic <- read_table("https://www.lr.pi.titech.ac.jp/~takamura/pubs/pn_ja.dic",
sep = ":",
col.names = c("term", "kana", "pos", "value"),
colClasses = c("character", "character", "factor", "numeric"),
fileEncoding = "Shift_JIS")
pndic <- read_table("http://www.lr.pi.titech.ac.jp/~takamura/pubs/pn_ja.dic",
sep = ":",
col.names = c("term", "kana", "pos", "value"),
colClasses = c("character", "character", "factor", "numeric"),
fileEncoding = "Shift_JIS")
pndic <- read.table("http://www.lr.pi.titech.ac.jp/~takamura/pubs/pn_ja.dic",
sep = ":",
col.names = c("term", "kana", "pos", "value"),
colClasses = c("character", "character", "factor", "numeric"),
fileEncoding = "Shift_JIS")
pndic <- read.table("http://www.lr.pi.titech.ac.jp/~takamura/pubs/pn_en.dic",
sep = ":",
col.names = c("term", "kana", "pos", "value"),
colClasses = c("character", "character", "factor", "numeric"),
fileEncoding = "Shift_JIS")
pndic <- read.table("http://www.lr.pi.titech.ac.jp/~takamura/pubs/pn_ja.dic",
sep = ":",
col.names = c("term", "kana", "pos", "value"),
colClasses = c("character", "character", "factor", "numeric"),
fileEncoding = "Shift_JIS")
pndic <- read.table("http://www.lr.pi.titech.ac.jp/~takamura/pubs/pn_ja.dic",
sep = ":",
col.names = c("term", "kana", "pos", "value"),
colClasses = c("character", "character", "factor", "numeric"),
fileEncoding = "Shift_JIS")
pndic <- read.table("http://www.lr.pi.titech.ac.jp/~takamura/pubs/pn_ja.dic",
sep = ":",
col.names = c("term", "kana", "pos", "value"),
colClasses = c("character", "character", "factor", "numeric"),
fileEncoding = "Shift_JIS")
View(pndic)
setwd("/Users/matsumurayuuya/Desktop/tmp/pndic")
pndic_ja <- read.table("http://www.lr.pi.titech.ac.jp/~takamura/pubs/pn_ja.dic",
sep = ":",
col.names = c("term", "kana", "pos", "value"),
colClasses = c("character", "character", "factor", "numeric"),
fileEncoding = "Shift_JIS")
save(pndic_ja, file = "pndic_ja.rda")
write.csv(pndic_ja, "pndic_ja.csv")
pndic_en <- read.table("http://www.lr.pi.titech.ac.jp/~takamura/pubs/pn_en.dic",
sep = ":",
col.names = c("term", "kana", "pos", "value"),
colClasses = c("character", "character", "factor", "numeric"),
fileEncoding = "Shift_JIS")
save(pndic_en, file = "pndic_en.rda")
write.csv(pndic_en, "pndic_en.csv")
pndic_en <- read.table("http://www.lr.pi.titech.ac.jp/~takamura/pubs/pn_en.dic",
sep = ":",
#col.names = c("term", "kana", "pos", "value"),
colClasses = c("character", "character", "factor", "numeric"),
fileEncoding = "Shift_JIS")
pndic_en <- read.table("http://www.lr.pi.titech.ac.jp/~takamura/pubs/pn_en.dic",
sep = ":",
#col.names = c("term", "kana", "pos", "value"),
#colClasses = c("character", "character", "factor", "numeric"),
fileEncoding = "Shift_JIS")
pndic_en <- readr::read_table("http://www.lr.pi.titech.ac.jp/~takamura/pubs/pn_en.dic",
#sep = ":",
#col.names = c("term", "kana", "pos", "value"),
#colClasses = c("character", "character", "factor", "numeric"),
#fileEncoding = "Shift_JIS"
)
View(pndic_en)
pndic_en <- readr::read_table("http://www.lr.pi.titech.ac.jp/~takamura/pubs/pn_en.dic",
sep = ":"
#col.names = c("term", "kana", "pos", "value"),
#colClasses = c("character", "character", "factor", "numeric"),
#fileEncoding = "Shift_JIS"
)
pndic_en <- readr::read_delim("http://www.lr.pi.titech.ac.jp/~takamura/pubs/pn_en.dic",
delim = ":"
#col.names = c("term", "kana", "pos", "value"),
#colClasses = c("character", "character", "factor", "numeric"),
#fileEncoding = "Shift_JIS"
)
View(pndic_en)
